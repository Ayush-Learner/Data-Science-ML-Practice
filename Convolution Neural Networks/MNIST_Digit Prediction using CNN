{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "mnist_colab.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMI4pa16rWhW+aizNJ+mbU8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ayush-Learner/Data-Science-ML-Practice/blob/master/mnist_colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7MQvkA5xJ4Tv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "from keras import layers\n",
        "from keras import models\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import random"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7FFZy8oyJ7NS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "ea0f7991-ca62-4cab-c4e3-dcdb948e6ee5"
      },
      "source": [
        "#Defining Neural Network\n",
        "model=models.Sequential()\n",
        "model.add(layers.Conv2D(32,(10,20),activation='relu',input_shape=(28,28,1)))\n",
        "model.add(layers.MaxPooling2D((2,2)))\n",
        "model.add(layers.Conv2D(64,(2,2),activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2,2)))\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(10,activation='softmax'))\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_19\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_32 (Conv2D)           (None, 19, 9, 32)         6432      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_25 (MaxPooling (None, 9, 4, 32)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_33 (Conv2D)           (None, 8, 3, 64)          8256      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_26 (MaxPooling (None, 4, 1, 64)          0         \n",
            "_________________________________________________________________\n",
            "flatten_16 (Flatten)         (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_16 (Dense)             (None, 10)                2570      \n",
            "=================================================================\n",
            "Total params: 17,258\n",
            "Trainable params: 17,258\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NXPgz1TSQYMC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.datasets import mnist\n",
        "(x_train, y_train),(x_test, y_test)=mnist.load_data() "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GrUtY8rASTaj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "7b305959-d537-47bb-fe9f-a2effae1f26d"
      },
      "source": [
        "#test\n",
        "n=random.randint(0,60000)\n",
        "plt.imshow(x_train[n]),y_train[n]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<matplotlib.image.AxesImage at 0x7f5e95717240>, 9)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_CFqb7IFTATQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Normalizing MNIST\n",
        "x_train=x_train.astype('float32')\n",
        "x_test=x_test.astype('float32')\n",
        "x_train=x_train/255\n",
        "x_test=x_test/255"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p6uN4RBNTXua",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Reshaping MNIST\n",
        "x_train = x_train.reshape((60000, 28, 28, 1))\n",
        "x_test = x_test.reshape((10000, 28, 28, 1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K6GmAcWITpwi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Converting Labels to vector\n",
        "from keras.utils import to_categorical\n",
        "y_train=to_categorical(y_train,num_classes=10)\n",
        "y_test=to_categorical(y_test,num_classes=10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xV68YLEqUnRT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "602ba942-c45f-4e35-c2a2-203828a5164e"
      },
      "source": [
        "#test\n",
        "y_train[9098]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IWrSZK9yUsQX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "c3049be5-5151-480e-d6c1-e6f637fc074e"
      },
      "source": [
        "#Defining Learning parameter\n",
        "model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy','categorical_accuracy'])\n",
        "model.fit(x_train,y_train,epochs=5,batch_size=100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "60000/60000 [==============================] - 25s 415us/step - loss: 1.1071 - acc: 0.7448 - categorical_accuracy: 0.7448\n",
            "Epoch 2/5\n",
            "60000/60000 [==============================] - 25s 410us/step - loss: 0.3641 - acc: 0.8973 - categorical_accuracy: 0.8973\n",
            "Epoch 3/5\n",
            "60000/60000 [==============================] - 25s 414us/step - loss: 0.2762 - acc: 0.9206 - categorical_accuracy: 0.9206\n",
            "Epoch 4/5\n",
            "60000/60000 [==============================] - 25s 414us/step - loss: 0.2331 - acc: 0.9320 - categorical_accuracy: 0.9320\n",
            "Epoch 5/5\n",
            "60000/60000 [==============================] - 25s 413us/step - loss: 0.2052 - acc: 0.9394 - categorical_accuracy: 0.9394\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f5e95242128>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dW2aNOvkhTlA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "3871e096-d153-49fc-ba7e-1821f17cc551"
      },
      "source": [
        "#Evaluating\n",
        "model.evaluate(x_test,y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10000/10000 [==============================] - 2s 191us/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.40765579394102097, 0.8802, 0.8802]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vYs2Zxn9jU-8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Predict\n",
        "pred=model.predict(x_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uGWYO_Yxjz32",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "b024c56f-e906-42cf-b4ab-463195550a51"
      },
      "source": [
        "n=random.randrange(0,10000)\n",
        "np.argmax(pred[n]),np.max(pred[n]),plt.imshow(x_test[n].reshape(28,28))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 0.9537963, <matplotlib.image.AxesImage at 0x7f5e9548bac8>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Z1Y-aYQ17F2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "23569ca4-ab8d-41a8-fe25-3da61efd893e"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "pred_list=[]\n",
        "y_test_list=[]\n",
        "for i in range(len(y_test)):\n",
        "  pred_list.append(np.argmax(pred[i]))\n",
        "  y_test_list.append(np.argmax(y_test[i]))\n",
        "confusion_matrix(pred_list,y_test_list)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 931,    0,   17,    6,    0,   18,   16,    7,   14,    5],\n",
              "       [   0, 1086,   11,    3,    4,    4,    4,   10,   11,   12],\n",
              "       [   6,   15,  901,   36,    8,    6,   11,   61,    7,    7],\n",
              "       [   1,   12,   20,  852,    1,   41,    0,    3,   45,   14],\n",
              "       [   0,    1,   17,    5,  905,   10,   29,    1,   15,   26],\n",
              "       [  21,    2,    4,   31,    0,  697,   21,    4,   37,   11],\n",
              "       [   3,    2,   11,    1,   24,    9,  859,    0,   14,    3],\n",
              "       [   7,    3,   24,   31,    0,   17,    3,  890,   21,   14],\n",
              "       [  10,   14,   22,   32,    2,   69,   14,    7,  783,   19],\n",
              "       [   1,    0,    5,   13,   38,   21,    1,   45,   27,  898]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jp6GcERq2yq-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ADnZOv8Qv4QX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "5eb1751c-48ad-4bd0-87e6-433bfa48e8fc"
      },
      "source": [
        "pred[1755:1900]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
              "        0.0000000e+00, 0.0000000e+00],\n",
              "       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
              "        0.0000000e+00, 0.0000000e+00],\n",
              "       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
              "        0.0000000e+00, 1.0000000e+00],\n",
              "       ...,\n",
              "       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
              "        0.0000000e+00, 0.0000000e+00],\n",
              "       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
              "        0.0000000e+00, 0.0000000e+00],\n",
              "       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00,\n",
              "        0.0000000e+00, 2.0286533e-20]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    }
  ]
}
